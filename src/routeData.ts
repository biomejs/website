import { site } from "astro:config/server";
import { getCollection } from "astro:content";
import { defineRouteMiddleware } from "@astrojs/starlight/route-data";
// @ts-ignore
import type { SidebarEntry } from "@astrojs/starlight/utils/routing/types.ts";

function addSidebarEntries(
	href: string,
	label: string,
	isCurrent: boolean,
): SidebarEntry {
	return {
		badge: undefined,
		href,
		label,
		type: "link",
		isCurrent,
		attrs: {
			class: "sl-blog-mobile-link",
		},
	};
}

export const onRequest = defineRouteMiddleware(async (context) => {
	const { head, isFallback, sidebar } = context.locals.starlightRoute;

	const ogImageUrl = await getOgImageUrl(context.url.pathname, !!isFallback);
	const imageSrc = ogImageUrl ?? "/img/og.png?v=2";
	const canonicalImageSrc = new URL(imageSrc, site);

	sidebar.unshift(
		addSidebarEntries(
			"/enterprise",
			"Enterprise",
			context.url.pathname.startsWith("/enterprise"),
		),
	);
	sidebar.unshift(
		addSidebarEntries(
			"/playground",
			"Playground",
			context.url.pathname.startsWith("/playground"),
		),
	);
	// Add a `<meta property="og:image">` tag to the current pageâ€™s `<head>`.
	head.push({
		tag: "meta",
		attrs: { property: "og:image", content: canonicalImageSrc.href },
	});
	head.push({
		tag: "meta",
		attrs: { property: "twitter:image", content: canonicalImageSrc.href },
	});
});

const docs = await getCollection("docs");
const routes = new Set(docs.map(({ id }) => `${id}.png`));

/**
 * Get the path to the OpenGraph image for a page
 * @param path Pathname of the page URL.
 * @param isFallback Whether or not this page is displaying fallback content.
 * @returns Path to the OpenGraph image if found. Otherwise, `undefined`.
 */
async function getOgImageUrl(
	path: string,
	isFallback: boolean,
): Promise<string | undefined> {
	/**  All the OpenGraph image paths as generated by our `getStaticPaths`. */

	let imagePath = `${path.replace(/^\//, "").replace(/\/$/, "")}.png`;

	if (isFallback) {
		// Replace the language segment with 'en' for fallback pages.
		imagePath = `en${imagePath.slice(imagePath.indexOf("/"))}`;
	}

	if (routes.has(imagePath)) return `/og/${imagePath}`;

	return undefined;
}
