use crate::project_root;
use anyhow::Result;
use biome_analyze::GroupCategory;
use biome_analyze::{Queryable, RegistryVisitor, Rule, RuleCategory, RuleGroup};
use biome_css_syntax::CssLanguage;
use biome_graphql_syntax::GraphqlLanguage;
use biome_js_syntax::JsLanguage;
use biome_json_syntax::JsonLanguage;
use biome_rowan::Language;
use biome_string_case::Case;
use std::collections::HashMap;
use std::fs;

#[derive(Default)]
struct Redirects {
    data: HashMap<String, String>,
}

impl Redirects {
    fn push_redirect<R, L>(&mut self)
    where
        L: Language,
        R: Rule<Options: Default, Query: Queryable<Language = L, Output: Clone>> + 'static,
    {
        let rule_name = R::METADATA.name;
        let dashed_rule = Case::Kebab.convert(rule_name);

        if <R::Group as RuleGroup>::Category::CATEGORY == RuleCategory::Action {
            self.data.insert(
                format!("/assist/actions/{}", rule_name),
                format!("/assist/actions/{}", dashed_rule),
            );
        } else {
            self.data.insert(
                format!("/linter/rules/{}", rule_name),
                format!("/linter/rules/{}", dashed_rule),
            );
        }
    }
}

impl RegistryVisitor<JsLanguage> for Redirects {
    fn record_rule<R>(&mut self)
    where
        R: Rule<Query: Queryable<Language = JsLanguage, Output: Clone>> + 'static,
    {
        self.push_redirect::<R, JsLanguage>();
    }
}

impl RegistryVisitor<JsonLanguage> for Redirects {
    fn record_rule<R>(&mut self)
    where
        R: Rule<Query: Queryable<Language = JsonLanguage, Output: Clone>> + 'static,
    {
        self.push_redirect::<R, JsonLanguage>();
    }
}

impl RegistryVisitor<CssLanguage> for Redirects {
    fn record_rule<R>(&mut self)
    where
        R: Rule<Query: Queryable<Language = CssLanguage, Output: Clone>> + 'static,
    {
        self.push_redirect::<R, CssLanguage>();
    }
}

impl RegistryVisitor<GraphqlLanguage> for Redirects {
    fn record_rule<R>(&mut self)
    where
        R: Rule<Query: Queryable<Language = GraphqlLanguage, Output: Clone>> + 'static,
    {
        self.push_redirect::<R, GraphqlLanguage>();
    }
}

pub fn generate_redirects() -> Result<()> {
    let redirects_file = project_root().join("redirects.js");

    let mut content = String::new();

    content.push_str("// This file is generated by the codegen. Do not edit it manually.\n");
    content.push_str("export default {\n");
    let mut redirects = Redirects::default();

    biome_js_analyze::visit_registry(&mut redirects);
    biome_json_analyze::visit_registry(&mut redirects);
    biome_css_analyze::visit_registry(&mut redirects);
    biome_graphql_analyze::visit_registry(&mut redirects);

    for (from, to) in redirects.data {
        content.push_str(&format!("  '{}': '{}',\n", from, to));
    }

    content.push_str("};\n");

    fs::write(redirects_file, content)?;

    Ok(())
}
